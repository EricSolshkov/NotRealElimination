TileData应当采用装饰者模式，以便为TileData[,]的一个单元重定义其在各种调用和访问中的行为。（各种用于判定的属性访问时）
-TileData应当维护一个List<prop>，当执行的到赋值表达式时，prop应当作为tag被尝试添加到该数组中，若该数组中已经具有这个prop，则跳过添加，否则检测是否有互斥项，并按照互斥规则决定是否添加到数组中。此数组同时也用于被各种getter访问。

preprocess不应当检查除了语句的构成结构以外的任何内容，其他工作如剔除无效语句、语义解释等应当交由compile方法完成
-按照babaisyou的设计，从tileData到有效的规则分为三步：
1.筛选出所有连续单词组（proto expr），该步骤不关注语义和句法。由于有效的规则最短为3个单词，可以在这一步筛除所有长度<3的原始表达式
2.判断所有连续单词组是否按词性构成语句，该步骤不关注语义，原作者表示这一步很复杂，难以优雅地扩展，可能需要借鉴语法树的概念
-为了构造语法树，必须定义运算符优先级。
-AST也即AST结点。AST是应当派生出具有各种词性的结构，还是应当利用成员变量判断自身的词性？
-在已经定义了运算符优先级的情况下，一个同时含有操作数、一元运算符和二元运算符的线性表达式，其中可能有不合法的表达，可能含有多个可能有重叠也可能不重叠的子列可以转化成二叉树，应该如何转化成尽可能高的二叉树呢？
3.判断语义，即各种词是否接受彼此作为前后级。

Rule应当有一个public的析构函数，用于判断是否被破坏，并从rules中删除自身。

游戏的核心流程目前仍然是原框架下的链式调用形式，这不便于使其可编程。若要选用新的框架，也许可以考虑策略模式。

不应当在board上不存在规则时使用默认规则，这不符合规则大于一切的设计原则。